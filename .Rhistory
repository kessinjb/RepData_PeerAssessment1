fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl,destfile="quiz3_GDP.csv")
GDP <-read.csv("quiz3_GDP.csv", na.string="Not Available", stringsAsFactors=FALSE, skip = 4)
GDP <- select(GDP, X, X.1, X.3, X.4)
GDP <- rename(GDP, CountryCode = X, RANK = X.1, COUNTRY = X.3, GDP = X.4)
GDP <- tbl_df(GDP)
GDP$RANK <- as.factor(GDP$RANK)
GDP$GDP <- as.factor(GDP$GDP)
GDP <- filter(GDP, RANK > 0  )
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl,destfile="quiz3_GDP.csv")
GDP <-read.csv("quiz3_GDP.csv", na.string="Not Available", stringsAsFactors=FALSE, skip = 4)
GDP <- select(GDP, X, X.1, X.3, X.4)
GDP <- rename(GDP, CountryCode = X, RANK = X.1, COUNTRY = X.3, GDP = X.4)
GDP <- tbl_df(GDP)
GDP$RANK <- as.numeric(GDP$RANK)
GDP$GDP <- as.numeric(GDP$GDP)
GDP <- filter(GDP, RANK > 0  )
str(GDP)
head(GDP)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl,destfile="quiz3_GDP.csv")
GDP <-read.csv("quiz3_GDP.csv", na.string="Not Available", stringsAsFactors=FALSE, skip = 4)
GDP <- select(GDP, X, X.1, X.3, X.4)
GDP <- rename(GDP, CountryCode = X, RANK = X.1, COUNTRY = X.3, GDP = X.4)
GDP <- tbl_df(GDP)
GDP$RANK <- as.numeric(GDP$RANK)
GDP$GDP <- as.factor(GDP$GDP)
GDP <- filter(GDP, RANK > 0  )
head(GDP)
str(GDP)
quest3 <- inner_join(EDU, GDP)
quest3 <- arrange(quest3, desc(RANK))
head(quest3,15)
str(quest3)
quest3 %>% Income.Group %>% summarize(avg  = mean(GDP))
quest3 %>% gruop_by(Income.Group) %>% summarize(avg  = mean(GDP))
quest3 %>% group_by(Income.Group) %>% summarize(avg  = mean(GDP))
quest3 %>% group_by(Income.Group) %>% summarize(avg  = mean(RANK))
quest5 <- cut(quest3, breaks = quantile(quest3$RANK))
quest5 <- cut(quest3$RANK, breaks = quantile(quest3$RANK))
quest5
quantile(quest3$RANK)
quest5 <- select(quest3, Rank, Income.Group)
quest5 <- select(quest3, RANK, Income.Group)
quest5
?cut
cut(quest5$RANK, breaks = quantile(quest5$RANK))
load.packages("Hmisc")
installed.packages("Hmisc")
installed.packages(Hmisc)
ntile(quest5$RANK)
ntile(quest5$RANK, 5)
quest5a <- select(quest5, RANK, Income.Group, tile =  ntile(quest5$RANK, 5))
quest5 <- mutate(quest5, bin = ntile(quest5$RANK,5))
quest5
filter(quest5, bin = 2 & RANK <= 38)
filter(quest5, bin = 2 & RANK <= 38 & Income.Group = "Lower middle income")
filter(quest5, bin = 2 & RANK <= 38 & Income.Group == "Lower middle income")
filter(quest5, bin = 4 & RANK <= 38 & Income.Group == "Lower middle income")
filter(quest5, bin = 1 & RANK <= 38 & Income.Group == "Lower middle income")
quest5 <- select(quest3, RANK, Income.Group)
quest5 <- mutate(quest5, bin = ntile(quest5$RANK,5))
quest5
filter(quest5, bin = 4 & RANK <= 38 & Income.Group == "Lower middle income")
filter(quest5, bin = 4)
filter(quest5, bin == 4 & RANK <= 38 & Income.Group == "Lower middle income")
filter(quest5, bin == 1 & RANK <= 38 & Income.Group == "Lower middle income")
filter(quest5, bin == 2 & RANK <= 38 & Income.Group == "Lower middle income")
filter(quest5,RANK <= 38 & Income.Group == "Lower middle income")
library(RCurl)
library(Curl)
if(!file.exists("data")){dir.create("data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile="quiz4.csv")
quest1 <-read.csv("quiz4.csv", na.string="Not Available", stringsAsFactors=FALSE)
strsplit(names(quest1),"wgtp")
if(!file.exists("data")){dir.create("data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl,destfile="quiz4_2.csv")
quest2 <-read.csv("quiz4_2.csv", na.string="Not Available", stringsAsFactors=FALSE)
quest2
names(quest2)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl,destfile="quiz3_GDP.csv")
GDP <-read.csv("quiz3_GDP.csv", na.string="Not Available", stringsAsFactors=FALSE, skip = 4)
GDP <- select(GDP, X, X.1, X.3, X.4)
GDP <- rename(GDP, CountryCode = X, RANK = X.1, COUNTRY = X.3, GDP = X.4)
library(dplyr)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl,destfile="quiz3_GDP.csv")
GDP <-read.csv("quiz3_GDP.csv", na.string="Not Available", stringsAsFactors=FALSE, skip = 4)
GDP <- select(GDP, X, X.1, X.3, X.4)
GDP <- rename(GDP, CountryCode = X, RANK = X.1, COUNTRY = X.3, GDP = X.4)
head(GDP)
gsub(",","",GDP$DGDP)
GDP
head(GDP)
gsub(',','',GDP$GDP)
head(GDP)
gsub(",","",GDP$GDP)
head(GDP)
GDP$GDP <- gsub(',','',GDP$GDP)
head(GDP)
mean(GDP$GDP)
GDP$GDP <- as.numeric(GDP$GDP)
mean(GDP$GDP, na.rm = TRUE)
mean(GDP$GDP)
GDP <- filter(GDP, RANK > 0  )
mean(GDP$GDP, na.rm = TRUE)
grep("^United",GDP$COUNTRY)
fileEDU <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileEDU,destfile="quiz4_EDU.csv")
EDU <-read.csv("quiz4_EDU.csv", na.string="Not Available", stringsAsFactors=FALSE)
head(EDW)
head(EDU)
str(EDU)
quest4 <- inner_join(EDU, GDP, by = CountryCode)
quest4 <- inner_join(EDU, GDP, by = "CountryCode")
quest4$Special.Notes
grep("^Fiscal year end: June 30",quest4$Special.Notes)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
installed.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
> install.packages('quantmod')
> install.packages("quantmod")
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
str(sampleTimes)
months(samplesTimes)
months(sampleTimes)
count(months(sampleTimes))
str(samepleTimes)
str(sampleTimes)
dates <- sampleTimes
head(dates)
str(dates)
count(dates)
year <- filter(years(sampleTimes),"2012")
year <- filter(year(sampleTimes),"2012")
install.packages(lubridate)
install.packages("lubridate")
library(lubridate)
dates
y(dates)
years(dates)
year(dates)
y1 <- as.df(years(dates))
y1 <- as.dataframe(years(dates))
y1 <- tbl_df(years(dates))
str(dates)
summary(dates)
y1 <- as.data.frame(years(dates))
str(y1)
head(y1)
y1 <- as.data.frame(year(dates))
head(y1)
str(y1)
y2 <- filter(y1, year == 2012)
y2 <- filter(y1, year == "2012")
count(y1, dates)
count(y1, year)
head(y1)
count(y1, year(dates))
y2 < as.data.frame(year(dates), day(dates))
y2 <- as.data.frame(year(dates), day(dates))
y2
y2 <- as.data.frame(c(year(dates), day(dates)))
y2
head(y2)
str(y2)
?lubridate
sampleTimes
weekdays(as.Date(sampleTimes,'%Y-%m-%d-'))
y3 <- weekdays(as.Date(sampleTimes,'%Y-%m-%d-')), year(SampleTimes)
y3 <- weekdays(as.Date(sampleTimes,'%Y-%m-%d-'))
y4 <- year(SampleTimes)
y3 <- weekdays(as.Date(sampleTimes,'%Y-%m-%d-'))
y4 <- year(sampleTimes)
y5 <- bind_cols(y3, y4)
y3 <- as.data.frame(weekdays(as.Date(sampleTimes,'%Y-%m-%d-')))
y4 <- as.data.frame(year(sampleTimes))
y5 <- bind_cols(y3, y4)
y5
y5 <- filter(y5,year(sampleTimes)==2012)
y5
count(y5, weekdays(as.Date(sampleTimes, "%Y-%m-%d-")))
count(y5, 1)
count(y5, [1, ])
str(y5)
y5 <- rename(y5, year = weekdays(as.Date(sampleTimes, "%Y-%m-%d-")))
print(y5)
y5
y5 <- rename(y5, year = v`)
`
y5 <- rename(y5, year = v1)
y5 <- rename(y5, year = y5[[1]])
y5 <- rename(y5, y = y5[[1]])
y5 <- rename(y5, y5[[1]])
y5 <- rename(y5, y5[[1]] = a)
y5 <- rename(y5, a = y5[[1]])
count(y5, y5[[1]])
swirl()
library(swirl)
rm(list=ls())
swirl()
library(tidyr)
students
?gather
gather(studentes, sex, count, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate()
?separate
separate(res, col = sex_class, into = c("sex", "class"))
submit()
submit()
students2
submit()
reset()
?gather
submit()
submit()
submit()
students3
submit()
?spread
submit()
submit()
extract_numeric("class")
extract_numeric("class5")
submit*
f
submit()
submit()
submit()
?extract_numeric
?mutate
submit()
submit()
students4
submit()
submit()
submit()
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status == "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?gather
submit()
submit*
f
submit()
submit()
submit()
submit()
submit()
pollution <- read.csv("data/avgpm25.csv", colClasses = c("numeric", "character", "factor", "numeric", "numeric"))
head(pollution)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
rm(list=ls())
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
install.packages(ggplot)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv )
qplot(displ, hwy, data = mpg, facets = .~drv, binwidth = 2 )
qplot(displ, hwy, data = mpg, facets = .~drv )
qplot(displ, hwy, data = mpg, facets = ~drv., binwidth = 2 )
qplot(displ, hwy, data = mpg, facets = drv~., binwidth = 2 )
qplot(hwy, data = mpg, facets = drv~., binwidth = 2 )
str(maacs)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
swirl()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = red, pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind, data = airquality, color = red, pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind, data = airquality, col = 3, pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind, data = airquality, col = 2, pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind as.factpr(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind , data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | month, data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[[x.limits]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
heat(v1)
head(v1)
str(v1)
v1
v2
myedit("plot1.R")
source(pathtofile("plot.R", local = TRUE)
2
source(pathtofile("plot.R"), local = TRUE)
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2,R")
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLables.R"), local = TRUE)
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
head(na_activity)
---
1
title: "RR_Peer_Assessment1"
## Set Working Directory
```{r}
echo=TRUE
setwd("C:/Users/jbkessin/Documents/Repr_Research/PA1")
```
## Read Data in
```{r}
echo=TRUE
activity <- read.csv("C:/Users/jbkessin/Documents/Repr_Research/PA1/activity.csv",)
```
## Clean and format data
```{r}
echo=TRUE
activity <- na.omit(activity) # Removes NAs
activity$date <- as.Date(activity$date, format = "%Y-%m-%d" )
activity$day <- weekdays(activity$date)
```
## Load Dplyr
### Dplyr is a helpful package for computing summaries
```{r}
echo=TRUE
library(dplyr)
```
## Aggregate data for first plot
```{r}
echo=TRUE
plot1_hist <- activity %>% group_by(date) %>% summarize(sum(steps))
names(plot1_hist)[2] <- 'total_steps'
```
## Histogram of Total Steps Per Day
```{r}
echo=TRUE
hist(plot1_hist$total_steps)
```
## Mean Steps Per Day
```{r}
echo=TRUE
mean(plot1_hist$total_steps)
```
## Median Steps Per Day
```{r}
echo=TRUE
median(plot1_hist$total_steps)
```
## Prepare Plot 2 Data
```{r}
echo=TRUE
plot2_ts <- activity %>% group_by(interval) %>% summarize(mean(steps))
names(plot2_ts)[2] <- 'avg_steps'
```
## Average Daily Activity Pattern
```{r}
echo=TRUE
plot(plot2_ts, type="l")
```
## The Interval with the Highest Average
```{r}
echo=TRUE
answer <- arrange(plot2_ts, desc(avg_steps))
answer[1,1]
```
## Total Number of Missing Values
```{r}
echo=TRUE
na_activity <- read.csv("C:/Users/jbkessin/Documents/Repr_Research/PA1/activity.csv",)
na_activity <- filter(na_activity, is.na(steps))
nrow(na_activity)
```
head(na_activity)
head(plot1_hist)
plot2_ts
head(na_activity)
str(na_activity)
na_act_fix <- left_join(na_activity, plot2_ts, by = "interval")
str(na_act_fix)
na_act_fix <- mutate(na_act_fix, steps = avg_steps)
str(na_act_fix)
na_act_fix <- na_act_fix[,1:3]
head(na_act_fix)
head(activity)
na_act_fix <- left_join(na_activity, plot2_ts, by = "interval")
### Mutate NA Steps to be that of the average across days for that interval
na_act_fix <- mutate(na_act_fix, steps = avg_steps)
na_act_fix <- na_act_fix[,1:3]
activity1 <- activity[,1:3]
### Create Dataset with all values
total_activity <- union(na_act_fix, activity1)
str(activity1)
str(nac_act_fix)
str(na_act_fix)
### Join to dataset with average steps per interval
na_act_fix <- left_join(na_activity, plot2_ts, by = "interval")
### Mutate NA Steps to be that of the average across days for that interval
na_act_fix <- mutate(na_act_fix, steps = avg_steps)
na_act_fix <- na_act_fix[,1:3]
na_act_fix$date <- as.Date(na_act_fix$date, format = "%Y-%m-%d" )
activity1 <- activity[,1:3]
activity1$steps <- as.numeric(activity1$steps)
### Create Dataset with all values
total_activity <- union(na_act_fix, activity1)
head(total_activity)
lot3_hist <- total_activity %>% group_by(date) %>% summarize(sum(steps))
names(plot3_hist)[2] <- 'total_steps'
### Plot data
hist(plot3_hist$total_steps)
plot3_hist <- total_activity %>% group_by(date) %>% summarize(sum(steps))
names(plot3_hist)[2] <- 'total_steps'
### Plot data
hist(plot3_hist$total_steps)
## Median Steps Per Day with All Info
weekday(total_activity$date)
isWeekday(total_activity$date, wday=1:5)
isWeekday(total_activity$date, wday=1:5)
weekdays(total_activity$date, abbreviate = FALSE )
?weekdays
ifelse(weekdays(total_activity$date, abbreviate = FALSE ) in c('Saturday','Sunday'), 'Weekend', 'Weekday')
ifelse(weekdays(total_activity$date, abbreviate = FALSE ) = c('Saturday','Sunday'), 'Weekend', 'Weekday')
ifelse(weekdays(total_activity$date, abbreviate = FALSE ) %in% c('Saturday','Sunday'), 'Weekend', 'Weekday')
total_act_1 <-- tota_activity
total_act_1 <- mutate(total_act_1, Day_Type =
ifelse(weekdays(total_activity$date, abbreviate = FALSE ) %in% c('Saturday','Sunday'), 'Weekend', 'Weekday') )
total_act_1 <-- total_activity
total_act_1 <- mutate(total_act_1, Day_Type =
ifelse(weekdays(total_act1$date, abbreviate = FALSE ) %in% c('Saturday','Sunday'), 'Weekend', 'Weekday') )
total_act_1 <- total_activity
total_act_1 <- mutate(total_act_1, Day_Type =
ifelse(weekdays(total_act1$date, abbreviate = FALSE ) %in% c('Saturday','Sunday'), 'Weekend', 'Weekday') )
total_act_1 <- total_activity
total_act_1 <- mutate(total_act_1, Day_Type =
ifelse(weekdays(total_act_1$date, abbreviate = FALSE ) %in% c('Saturday','Sunday'), 'Weekend', 'Weekday') )
str(total_act_1)
total_act_1$Day_Type <- as.factor(total_act_1$Day_Type)
str(total_act_1)
head(total_act_1)
library(ggplot2)
facet_wrap(~City, scales = "free") + geom_smooth(method="lm", se=FALSE)
final_plot <- total_act_1 %>% group_by(interval, Day_Type) %>% summarize(mean(steps))
str(final_plot)
names(final_plot)[3] <- 'avg_steps'
ggplot(final_plot, aes(x=interval, y=avg_steps)) + geom_line() + facet_grid(. ~ Day_Type) +
facet_wrap(~Day_Type)
